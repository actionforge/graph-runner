//go build generate_node_stubs
//go:build generate_node_stubs
// +build generate_node_stubs

package cmd

import (
	"fmt"
	"log"
	"os"
	"sort"
	"strings"
	"unicode"

	"actionforge/graph-runner/core"

	// initialize all nodes
	_ "actionforge/graph-runner/nodes"

	"github.com/spf13/cobra"
	"golang.org/x/exp/maps"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

var cmdGenerate = &cobra.Command{
	Use: "generate",
	Run: func(cmd *cobra.Command, args []string) {
		err := GenerateNodeStubs()
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	cmdRoot.AddCommand(cmdGenerate)
}

type PortParam interface {
	core.OutputId | core.InputId
}

func arrayify[T PortParam](outputIds []T) []string {
	var stringArray []string

	for _, id := range outputIds {
		stringArray = append(stringArray, "\""+string(id)+"\"")
	}

	return stringArray
}

// Find the go.mod file in the current or parent directories
func findGoModFile() (string, error) {

	cwd, err := os.Getwd()
	if err != nil {
		return "", err
	}

	for {
		_, err := os.Stat(cwd + "/go.mod")
		if err == nil {
			break
		}
		if !os.IsNotExist(err) {
			return "", err
		}
		if cwd == "/" {
			return "", fmt.Errorf("go.mod file not found")
		}
		cwd = cwd[:strings.LastIndex(cwd, "/")]
	}

	return cwd, nil
}

// Delete all files in a folder ending with ".go"
func deleteFilesInFolder(folder string) error {

	files, err := os.ReadDir(folder)
	if err != nil {
		return err
	}

	for _, file := range files {
		if strings.HasSuffix(file.Name(), ".go") {
			err := os.Remove(folder + "/" + file.Name())
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func createGoApi(projectRootDir string) error {

	lowerCaser := cases.Lower(language.English)

	registry := core.GetRegistries()

	keys := maps.Keys(registry)
	sort.Strings(keys)

	fmt.Println("Generating node stubs...")

	for _, name := range keys {
		node := registry[name]

		fmt.Printf("  %s\n", name)

		name = strings.ReplaceAll(string(name), "/", "_")
		name = strings.ReplaceAll(string(name), "@", "_")

		fp, err := os.Create(projectRootDir + "/node_interfaces/interface_" + lowerCaser.String(string(name)) + ".go")
		if err != nil {
			return err
		}
		defer fp.Close()

		fmt.Fprintf(fp, "// Code generated by graph-runner. DO NOT EDIT.\n\n")
		fmt.Fprintf(fp, "package node_interfaces\n\n")
		fmt.Fprintf(fp, "import \"actionforge/graph-runner/core\"")

		fmt.Fprintf(fp, "// %v\n", node.Description)

		inputIds := maps.Keys(node.Inputs)
		sort.Slice(inputIds, func(i, j int) bool {
			return inputIds[i] < inputIds[j]
		})

		// E.g: turn "webhook-async" into "Webhook-async"
		enumName := string(unicode.ToUpper(rune(name[0]))) + name[1:]

		enumName = strings.ReplaceAll(string(enumName), ".", "_")
		enumName = strings.ReplaceAll(string(enumName), "-", "_")
		enumName = strings.ReplaceAll(string(enumName), "@", "_")

		outputIds := maps.Keys(node.Outputs)
		sort.Slice(outputIds, func(i, j int) bool {
			return outputIds[i] < outputIds[j]
		})

		if len(inputIds) > 0 {
			fmt.Fprintf(fp, "\n\n")
			fmt.Fprintf(fp, "// ==> (o) Inputs\n\n")
		}
		for _, inputId := range inputIds {
			p := node.Inputs[inputId]
			fmt.Fprintf(fp, "// %v\n", p.Description)
			v := strings.ReplaceAll(string(inputId), "-", "_")
			fmt.Fprintf(fp, "const %v_Input_%v core.InputId = \"%v\"\n",
				enumName,
				strings.TrimSuffix(v, "[]"),
				strings.TrimSuffix(string(inputId), "[]"),
			)
		}

		if len(node.Outputs) > 0 {
			fmt.Fprintf(fp, "\n\n")
			fmt.Fprintf(fp, "// Outputs (o) ==> \n\n")
		}
		for _, outputId := range outputIds {
			p := node.Outputs[outputId]
			fmt.Fprintf(fp, "// %v\n", p.Description)
			v := strings.ReplaceAll(string(outputId), "-", "_")
			fmt.Fprintf(fp, "const %v_Output_%v core.OutputId = \"%v\"\n", enumName, core.OutputId(v), outputId)
		}

		fmt.Fprintf(fp, "\n\n")
	}

	return nil
}

func GenerateNodeStubs() error {

	projectRootDir, err := findGoModFile()
	if err != nil {
		return err
	}

	// Delete all files as they will be recreated.
	err = deleteFilesInFolder(projectRootDir + "/node_interfaces")
	if err != nil {
		if !os.IsNotExist(err) {
			return err
		}
	}

	err = os.MkdirAll(projectRootDir+"/node_interfaces", 0755)
	if err != nil {
		return err
	}

	err = createGoApi(projectRootDir)
	if err != nil {
		return err
	}

	return nil
}
